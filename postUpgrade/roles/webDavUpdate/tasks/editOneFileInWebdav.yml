---
- name: Update WebDav Files
  block:
    - name: Create temporary directory as mount point for WebDav
      become_user: "root"
      ansible.builtin.tempfile:
        state: directory
        prefix: webdav
      register: mountpoint
      tags:
        - always

    - name: Create temporary directory to copy the WebDav file for processing
      become_user: "root"
      ansible.builtin.tempfile:
        state: directory
        prefix: cpytgt
      register: cpytgt
      tags:
        - always

    - name: Mount WebDav filesystem {{ roleWebDavHostUrl }}/{{ webDavItem.webDavMountDir }}
      become_user: "root"
      ansible.builtin.import_tasks: mountWebDav.yml
      tags:
        - always

    - name: Get content of unmodified file  {{ mountpoint.path }}/{{ webDavItem.webDavPath }}/{{ webDavItem.file }}
      become_user: "root"
      ansible.builtin.command:
        argv:
          - "cat"
          - "{{ mountpoint.path }}/{{ webDavItem.webDavPath }}/{{ webDavItem.file }}"
      register: cmdResult
      failed_when: (cmdResult.rc != 0)
      tags:
        - always

    - name: Debug file content of unmodified file {{ mountpoint.path }}/{{ webDavItem.webDavPath }}/{{ webDavItem.file }}
      ansible.builtin.debug:
        msg: "File {{ webDavItem.file }} is:\n {{ cmdResult.stdout }}"
      tags:
        - always

    - name: Copy WebDav file to local FS to avoid issues with davfs mounts
      become_user: "root"
      ansible.builtin.shell: |
        cp -p "{{ mountpoint.path }}/{{ webDavItem.webDavPath }}/{{ webDavItem.file }}" "{{ cpytgt.path }}/{{ webDavItem.file }}"
      register: shellResult
      failed_when: (shellResult.rc != 0)
      tags:
        - always

    - name: Edit the WebDav file {{ cpytgt.path }}/{{ webDavItem.file }}
      become_user: "root"
      ansible.builtin.blockinfile:
        path: "{{ cpytgt.path }}/{{ webDavItem.file }}"
        block: "{{ webDavItem.textBlock }}"
        marker: "{{ webDavItem.textMarker }}"
        state: "{{ webDavItem.state }}"
      tags:
        - always

    - name: Sync filesystem changes
      become_user: "root"
      ansible.builtin.command:
        argv:
          - "sync"
      register: cmdResult
      failed_when: (cmdResult.rc != 0)
      tags:
        - always

    - name: Copy file from local FS back to mounted WebDav location
      become_user: "root"
      ansible.builtin.shell: |
        cp "{{ cpytgt.path }}/{{ webDavItem.file }}" "{{ mountpoint.path }}/{{ webDavItem.webDavPath }}/{{ webDavItem.file }}"
      register: shellResult
      failed_when: (shellResult.rc != 0)
      tags:
        - always

    - name: Get content of changed file {{ mountpoint.path }}/{{ webDavItem.webDavPath }}/{{ webDavItem.file }}
      become_user: "root"
      ansible.builtin.command:
        argv:
          - "cat"
          - "{{ mountpoint.path }}/{{ webDavItem.webDavPath }}/{{ webDavItem.file }}"
      register: cmdResult
      failed_when: (cmdResult.rc != 0)
      tags:
        - always

    - name: Debug file content of modified file {{ mountpoint.path }}/{{ webDavItem.webDavPath }}/{{ webDavItem.file }}
      ansible.builtin.debug:
        msg: "File {{ webDavItem.file }} is:\n {{ cmdResult.stdout }}"
      tags:
        - always

  always:
    - name: UnMount WebDav filesystem {{ roleWebDavHostUrl }}/{{ webDavItem.webDavMountDir }}
      become_user: "root"
      ansible.builtin.import_tasks: unMountWebDav.yml
      tags:
        - always

    - name: Cleanup WebDav mount point
      become_user: "root"
      ansible.builtin.file:
        state: absent
        path: "{{ mountpoint.path }}"

    - name: Cleanup copy target
      become_user: "root"
      ansible.builtin.file:
        state: absent
        path: "{{ cpytgt.path }}"
