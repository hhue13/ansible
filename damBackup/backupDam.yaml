---
#######################################################################################################
## Requires the following collections and python modules:
##
## See README.md for required software dependencies
##
## ansible-playbook  --tags backup -e @globalVars backupDam.yaml
## ansible-playbook  --tags restore -e @globalVars backupDam.yaml
##
## ansible-playbook --vault-id k8s@~/ansible_password --tags backup -e @globalVars backupDam.yaml
##
## Note: Make sure you setup visudo correctly so that "sudo -i -u <become_user>" works
#######################################################################################################
- name: Backup HCL DX DAM Data
  hosts: crchosts
  become: yes
  become_user: "{{ oscpOsUser }}"
  gather_facts: true
  force_handlers: true
  module_defaults:
    kubernetes.core.k8s:
      validate_certs: "no"
    kubernetes.core.k8s_info:
      validate_certs: "no"
    kubernetes.core.k8s_exec:
      validate_certs: "no"
    kubernetes.core.k8s_cp:
      validate_certs: "no"
    community.okd.openshift_auth:
      validate_certs: "no"
    community.okd.openshift_process:
      validate_certs: "no"
    community.okd.openshift_route:
      validate_certs: "no"
  #########################
  ## Tasks of the play-book
  #########################
  tasks:
    - name: Send notification message via Slack that backup started
      community.general.slack:
        token: "{{ slackAuthenticationToken }}"
        msg: "DAM backup on host: {{ inventory_hostname }} started"
      when: ((sendSlackNotifications is defined) and (sendSlackNotifications == true))
      tags:
        - backup

    - name: Send notification message via Slack that restore started
      community.general.slack:
        token: "{{ slackAuthenticationToken }}"
        msg: "Restore of DAM backup on host: {{ inventory_hostname }} started"
      when: ((sendSlackNotifications is defined) and (sendSlackNotifications == true))
      tags:
        - restore
    ##
    ## Set login facts
    - name: Set K8S login facts
      include_tasks: k8slogin.yaml
      tags:
        - always
    ##
    ## Retrieving the current timestamp
    - name: Retrieving the current timestamp
      ansible.builtin.set_fact:
        backup_timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
      tags:
        - always
    ##
    ## Checking for env variable K8S_NAMESPACE
    - name: Checking for env variable K8S_NAMESPACE
      ansible.builtin.set_fact:
        k8s_ns: "{{ lookup('env', 'K8S_NAMESPACE') }}"
      tags:
        - always
    ##
    ## Get the namespace from the variables file of no ENV variable set
    - name: Get backup namespace
      ansible.builtin.set_fact:
        k8s_ns: "{{ oscpDamNameSpace }}"
      when: (( k8s_ns is not defined) or
        (k8s_ns == ''))
      tags:
        - always
    ##
    ## Dump API Key
    - name: Dump API Key in MAIN
      ansible.builtin.debug:
        msg:
          - "API Key is {{ kube_api_key  }}"
      tags:
        - never
    ##
    ## Run oc login using the api key
    - name: Login to the oc client using the API key
      ansible.builtin.command:
        argv:
          - "{{ oscpClientBin | default('/usr/local/bin/oc') }}"
          - "login"
          - "--token={{ kube_api_key }}"
          - "--server={{ k8s_host }}"
      register: cmdResult
      ##### failed_when: (cmdResult.rc != 0)
      tags:
        - always
    ##
    ## Run oc login using the api key
    - name: Debug the command result of 'oc login'
      ansible.builtin.debug:
        msg:
          - "cmdResult is {{ cmdResult }}"
      tags:
        - always
    ##
    ## Run oc login using the api key
    - name: Debug the command result of 'oc login'
      ansible.builtin.debug:
        msg:
          - "cmdResult is {{ cmdResult }}"
      tags:
        - always
    ########################################################################################
    ### Restore of DAM Data - part #1
    ########################################################################################
    - name: Verify that the XML files to import exist
      ansible.builtin.include_tasks: checkFilesExistence.yaml
      vars:
        fileToCheck: "{{ item }}"
      loop: "{{ restoreXmlFiles }}"
      tags:
        - restore
    - name: Verify that the DAM files to restore exist
      ansible.builtin.include_tasks: checkFilesExistence.yaml
      vars:
        fileToCheck: "{{ item }}"
      loop: "{{ restoreDirectories }}"
      tags:
        - restore
    - name: Verify that the Postgress files to restore exist
      ansible.builtin.include_tasks: checkFilesExistence.yaml
      vars:
        fileToCheck: "{{ item }}"
      loop: "{{ restoreDatabases }}"
      tags:
        - restore
    ##
    ## Test debug
    - name: Test handler debug
      shell: 'echo "Test-0: Current date is: $(date)" >> /dev/shm/hhue.txt'
      tags:
        - always
    # tasks file for backupPostgress
    ##
    ## Determine the currently active postgress pod
    - name: Run tasks to determine the active postgress database node
      ansible.builtin.include_tasks: getActiveDbPod.yml
      vars:
        roleKey: "{{ kube_api_key }}"
        roleNs: "{{ k8s_ns }}"
        roleHost: "{{ k8s_host }}"
        roleInitialPersistentPodName: "{{ persistencePodName }}"
        rolePersistentPodContainerName: "{{ persistencePodContainerName | default('persistence-node') }}"
      tags:
        - always
    ##
    ## Test debug
    - name: Debug activePersistentPodName
      ansible.builtin.debug:
        msg:
          - "Debug: Currently active DB pod is: {{ activePersistentPodName }}"
      tags:
        - always
    ########################################################################################
    ### Backup of DAM Data
    ########################################################################################
    ##
    ## Make sure that the target directory exists
    - name: Create target directory for the backup files if it does not exist
      ansible.builtin.command:
        argv:
          - "mkdir"
          - "-p"
          - "{{ targetDirectoryForBackupFiles }}"
      register: cmdResult
      failed_when: (cmdResult.rc != 0)
      tags:
        - backup
    ##
    ## Run the xmlaccess export from core
    - name: Run role runXmlAccess to export collections
      ansible.builtin.include_role:
        name: runXmlAccess
      vars:
        roleKey: "{{ kube_api_key }}"
        roleNs: "{{ k8s_ns }}"
        roleHost: "{{ k8s_host }}"
        roleWpsAdminUser: "{{ wpsUser }}"
        roleWpsAdminPassword: "{{ wpsPassword }}"
        roleXmlInputFile: "{{ xmlAccessInputFile }}"
        roleCorePodName: "{{ corePodName }}"
        roleCoreContainerName: "{{ coreContainerName }}"
        roleTargetDirectoryForXmlFiles: "{{ targetDirectoryForBackupFiles }}"
        roleXmlAccessOutputPattern: "{{ xmlAccessExportPattern }}"
        roleBackupTimestamp: "{{ backup_timestamp }}"
        roleTimestampPattern: "{{ timestampPattern }}"
        roleLatestLinkSuffix: "{{ latestLinkSuffix }}"
      tags:
        - backup
    ## Run the backup of the database pod
    - name: Run role backupPostgress
      ansible.builtin.include_role:
        name: backupPostgress
      vars:
        roleKey: "{{ kube_api_key }}"
        roleNs: "{{ k8s_ns }}"
        roleHost: "{{ k8s_host }}"
        roleDatabases: "{{ backupDatabases }}"
        roleBackupTimestamp: "{{ backup_timestamp }}"
        rolePersistentPodName: "{{ activePersistentPodName }}"
        rolePersistentPodContainerName: "{{ persistencePodContainerName | default('persistence-node') }}"
        roleTargetDirectoryForBackupFiles: "{{ targetDirectoryForBackupFiles }}"
        roleLatestLinkSuffix: "{{ latestLinkSuffix }}"
        roleBackupType: "{{ backupType | default('full') }}"
      tags:
        - backup
    ##
    ## Run the backup of the DAM pod
    - name: Run role backupDam
      ansible.builtin.include_role:
        name: backupDam
      vars:
        roleKey: "{{ kube_api_key }}"
        roleNs: "{{ k8s_ns }}"
        roleHost: "{{ k8s_host }}"
        roleDirectories: "{{ backupDirectories }}"
        roleBackupTimestamp: "{{ backup_timestamp }}"
        roleDamPodName: "{{ damPodName }}"
        roleDamPodContainerName: "{{ damPodContainerName | default('digital-asset-management') }}"
        roleTargetDirectoryForBackupFiles: "{{ targetDirectoryForBackupFiles }}"
        roleLatestLinkSuffix: "{{ latestLinkSuffix }}"
      tags:
        - backup
    ########################################################################################
    ### Restore of DAM Data - part #2
    ########################################################################################
    ##
    ## Restore the DAM directories
    ## Run the xmlaccess export from core
    - name: Run role runXmlAccess to import collections
      ansible.builtin.include_role:
        name: runXmlAccess
      vars:
        roleKey: "{{ kube_api_key }}"
        roleNs: "{{ k8s_ns }}"
        roleHost: "{{ k8s_host }}"
        roleInputFile: "{{ xmlAccessInputFile }}"
        roleWpsAdminUser: "{{ wpsUser }}"
        roleWpsAdminPassword: "{{ wpsPassword }}"
        roleXmlInputFile: "{{ item.backupFile }}"
        roleCorePodName: "{{ corePodName }}"
        roleCoreContainerName: "{{ coreContainerName }}"
        roleTargetDirectoryForXmlFiles: "{{ targetDirectoryForBackupFiles }}"
        roleXmlAccessOutputPattern: "{{ xmlAccessImportPattern }}"
        roleBackupTimestamp: "{{ backup_timestamp }}"
        roleTimestampPattern: "{{ timestampPattern }}"
      loop: "{{ restoreXmlFiles }}"
      tags:
        - restore
    ##
    ## Restore the filesystem data
    - name: Restore DAM data
      ansible.builtin.include_role:
        name: restoreDam
      vars:
        roleKey: "{{ kube_api_key }}"
        roleNs: "{{ k8s_ns }}"
        roleHost: "{{ k8s_host }}"
        roleDirectories: "{{ restoreDirectories }}"
        roleDamPodName: "{{ damPodName }}"
        roleDamPodContainerName: "{{ damPodContainerName | default('digital-asset-management') }}"
        roleTargetDirectoryForBackupFiles: "{{ targetDirectoryForBackupFiles }}"
      tags:
        - restore
    ##
    ## Restore Postgress database
    - name: Restore Postgress data
      ansible.builtin.include_role:
        name: restorePostgress
      vars:
        roleKey: "{{ kube_api_key }}"
        roleNs: "{{ k8s_ns }}"
        roleHost: "{{ k8s_host }}"
        roleDatabases: "{{ restoreDatabases }}"
        rolePersistentPodName: "{{ activePersistentPodName }}"
        rolePersistentPodContainerName: "{{ persistencePodContainerName | default('persistence-node') }}"
        roleTargetDirectoryForBackupFiles: "{{ targetDirectoryForBackupFiles }}"
        roleWaitTimeBeforeDropDb: "{{ waitTimeBeforeDropDb | default('10')  }}"
      tags:
        - restore
    ##
    ## Recreate the DAM PODs after the restore
    - name: Recreate the DAM PODs after the restore
      ansible.builtin.include_role:
        name: deletePodsforApp
      vars:
        roleKey: "{{ kube_api_key }}"
        roleNs: "{{ k8s_ns }}"
        roleHost: "{{ k8s_host }}"
        roleAppTag: "{{ damAppTag }}"
      tags:
        - restore
    ##
    ## Housekeeping - cleanup old backups
    - name: Housekeeping - cleanup old backups
      ansible.builtin.shell: |
        find {{ targetDirectoryForBackupFiles }} -name "{{ oscpDamDeployment }}-*" -mtime +{{ backupRetentionPeriod | default('90') }} -exec rm -rf {} \;
      register: cmdResult
      failed_when: (cmdResult.rc != 0)
      tags:
        - backup
    ##
    ## List the Backup files taken with the timestamp to Slack
    - name: List the backup files taken
      ansible.builtin.shell: |
        ls -altr {{ targetDirectoryForBackupFiles }}/*{{ backup_timestamp }}*
      register: cmdResult
      failed_when: (cmdResult.rc != 0)
      tags:
        - backup
    ##
    ## Send the list of files to Slack
    - name: Send the list of files to Slack
      community.general.slack:
        token: "{{ slackAuthenticationToken }}"
        msg: "List of  backup files created:\n ```{{ cmdResult.stdout }}```"
      when: ((sendSlackNotifications is defined) and (sendSlackNotifications == true))
      tags:
        - backup
    ##
    ## Perform the oc logout
    - name: Logout of the command line client
      ansible.builtin.command:
        argv:
          - "{{ oscpClientBin | default('/usr/local/bin/oc') }}"
          - "logout"
      when: ((oscpLogoutOfOc is defined) and
        (oscpLogoutOfOc | bool))
      tags:
        - always
    ##
    ## Logout
    - name: If login succeeded, try to log out (revoke access token)
      community.okd.openshift_auth:
        host: "{{ k8s_host }}"
        state: absent
        api_key: "{{ kube_api_key }}"
        validate_certs: "no"
      when: kube_api_key is defined
      tags:
        - always
    ##
    ## Send slack notifications that playbook has finished
    - name: Send notification message via Slack that backup finished
      community.general.slack:
        token: "{{ slackAuthenticationToken }}"
        msg: "DAM backup on host: {{ inventory_hostname }} finished"
      when: ((sendSlackNotifications is defined) and (sendSlackNotifications == true))
      tags:
        - backup

    - name: Send notification message via Slack that restore finished
      community.general.slack:
        token: "{{ slackAuthenticationToken }}"
        msg: "Restore of DAM backup on host: {{ inventory_hostname }} finished"
      when: ((sendSlackNotifications is defined) and (sendSlackNotifications == true))
      tags:
        - restore
