---
- name: Set the tmp directory for the backup files with default just once
  ansible.builtin.set_fact:
    __backup_temp_dir: "{{ backupFileDict['tmpDir'] | default('/tmp') }}"
  tags:
    - always

- name: Make sure the tmp directory for the backup ({{ __backup_temp_dir }}) exists
  kubernetes.core.k8s_exec:
    namespace: "{{ roleNs }}"
    host: "{{ roleHost }}"
    api_key: "{{ roleKey }}"
    command: "mkdir -p {{ __backup_temp_dir }}"
    pod: "{{ rolePersistentPodName }}"
    container: "{{ rolePersistentPodContainerName }}"
  register: podResult
  failed_when: (podResult.rc != 0)
  tags:
    - always

- name: Create full postgress backup file for database {{ backupFileDict['name'] }}
  kubernetes.core.k8s_exec:
    namespace: "{{ roleNs }}"
    host: "{{ roleHost }}"
    api_key: "{{ roleKey }}"
    command: "pg_dump -d {{ backupFileDict['name'] }} -f {{ __backup_temp_dir }}/{{ backupFileDict['backupFile'] }}_{{ roleBackupType }}_{{ roleBackupTimestamp }}.dmp"
    pod: "{{ rolePersistentPodName }}"
    container: "{{ rolePersistentPodContainerName }}"
  register: podResult
  failed_when: (podResult.rc != 0)
  when: (roleBackupType != 'sync')
  tags:
    - always
##
## --exclude-table-data=event_log --exclude-table-data=subscriber_registration
- name: Create sync postgress backup file for database {{ backupFileDict['name'] }}
  kubernetes.core.k8s_exec:
    namespace: "{{ roleNs }}"
    host: "{{ roleHost }}"
    api_key: "{{ roleKey }}"
    command: "pg_dump -d {{ backupFileDict['name'] }} --exclude-table-data=*.event_log --exclude-table-data=*.subscriber_registration -f {{ __backup_temp_dir }}/{{ backupFileDict['backupFile'] }}_{{ roleBackupType }}_{{ roleBackupTimestamp }}.dmp"
    pod: "{{ rolePersistentPodName }}"
    container: "{{ rolePersistentPodContainerName }}"
  register: podResult
  failed_when: (podResult.rc != 0)
  when: (roleBackupType == 'sync')
  tags:
    - always
##
## Compress backups on POD
- name: Compress postgress backup file {{ backupFileDict['backupFile'] }}_{{ roleBackupType }}_{{ roleBackupTimestamp }}.dmp
  kubernetes.core.k8s_exec:
    namespace: "{{ roleNs }}"
    host: "{{ roleHost }}"
    api_key: "{{ roleKey }}"
    command: "gzip -9 {{ __backup_temp_dir }}/{{ backupFileDict['backupFile'] }}_{{ roleBackupType }}_{{ roleBackupTimestamp }}.dmp"
    pod: "{{ rolePersistentPodName }}"
    container: "{{ rolePersistentPodContainerName }}"
  register: podResult
  failed_when: (podResult.rc != 0)
  tags:
    - always
