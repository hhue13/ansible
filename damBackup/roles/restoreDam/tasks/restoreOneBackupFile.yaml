---
- name: Set the tmp directory for the backup files with default just once
  ansible.builtin.set_fact:
    __backup_temp_dir: "{{ backupFileDict['tmpDir'] | default('/tmp') }}"
  tags:
    - always

- name: Set the default tar command to be non-verbose
  ansible.builtin.set_fact:
    restore_command: "tar -mpxf"
  tags:
    - always

- name: Set the default tar command to be verbose if requested
  ansible.builtin.set_fact:
    restore_command: "tar -mvpxf"
  when: ((backupFileDict['verbose'] is defined) and
    ( backupFileDict['verbose'] == true))
  tags:
    - always

- name: Template the backup scripts
  ansible.builtin.include_tasks: templateAndCopyOneFile.yaml
  vars:
    __srcTemplate: "{{ __restoreTemplate.j2 }}"
    __targetFile: "{{ __restoreTemplate.sh }}"
  loop: "{{ restoreTemplates }}"
  loop_control:
    loop_var: __restoreTemplate
  tags:
    - always

## Run tar command for directories on POD
- name: Extract directory backup file {{ backupFileDict['backupFile'] }} to {{ backupFileDict['name'] }}
  kubernetes.core.k8s_exec:
    namespace: "{{ roleNs }}"
    host: "{{ roleHost }}"
    api_key: "{{ roleKey }}"
    command: "bash -c '{{ __backup_temp_dir }}/{{ restoreTemplates[0].sh }} >/dev/null 2>/dev/null'"
    pod: "{{ roleDamPodName }}"
    container: "{{ roleDamPodContainerName }}"
  register: podResult
  failed_when: (podResult.rc != 0)
  tags:
    - always

- name: Check if the backup has finished
  kubernetes.core.k8s_exec:
    namespace: "{{ roleNs }}"
    host: "{{ roleHost }}"
    api_key: "{{ roleKey }}"
    command: "{{ __backup_temp_dir }}/{{ restoreTemplates[1].sh }}"
    pod: "{{ roleDamPodName }}"
    container: "{{ roleDamPodContainerName }}"
  register: podResult
  until: podResult is succeeded
  retries: "{{ checkNumberRetries | default('90') }}"
  delay: "{{ checkDelayBetweenRetries | default('20') }}"
  tags:
    - always

- name: Check if un-tar did complete successfully
  kubernetes.core.k8s_exec:
    namespace: "{{ roleNs }}"
    host: "{{ roleHost }}"
    api_key: "{{ roleKey }}"
    command: "{{ __backup_temp_dir }}/{{ restoreTemplates[2].sh }}"
    pod: "{{ roleDamPodName }}"
    container: "{{ roleDamPodContainerName }}"
  register: podResult
  failed_when: (podResult.rc != 0)
  tags:
    - always
##
## Remove the backup file from the pod
- name: Remove directory backup file {{ backupFileDict['backupFile'] }}
  kubernetes.core.k8s_exec:
    namespace: "{{ roleNs }}"
    host: "{{ roleHost }}"
    api_key: "{{ roleKey }}"
    command: "rm -rf {{ __backup_temp_dir }}/{{ backupFileDict['backupFile'] }}"
    pod: "{{ roleDamPodName }}"
    container: "{{ roleDamPodContainerName }}"
  register: podResult
  failed_when: (podResult.rc != 0)
  tags:
    - always
