---
#######################################################################################################
## Requires the following collections and python modules:
##
## See README.md for required software dependencies
##
## ansible-playbook --vault-id k8s@~/ansible_password --tags backup -e @globalVars toggleRoute.yaml
##
## Note: Make sure you setup visudo correctly so that "sudo -i -u <become_user>" works
#######################################################################################################
- name: Toggle DX route between two namespaces
  hosts: crchosts
  become: yes
  become_user: "{{ oscpOsUser }}"
  gather_facts: true
  force_handlers: true
  module_defaults:
    kubernetes.core.k8s:
      validate_certs: "no"
    kubernetes.core.k8s_info:
      validate_certs: "no"
    kubernetes.core.k8s_exec:
      validate_certs: "no"
    kubernetes.core.k8s_cp:
      validate_certs: "no"
    community.okd.openshift_auth:
      validate_certs: "no"
    community.okd.openshift_process:
      validate_certs: "no"
    community.okd.openshift_route:
      validate_certs: "no"
  #########################
  ## Tasks of the play-book
  #########################
  tasks:
    - name: Send start notification message via Slack
      community.general.slack:
        token: "{{ slackAuthenticationToken }}"
        msg: "Toggle DX route: {{ inventory_hostname }} started"
      when: ((sendSlackNotifications is defined) and (sendSlackNotifications == true))
      tags:
        - always
    ##
    ## Set login facts
    - name: Set K8S login facts
      include_tasks: k8slogin.yaml
      tags:
        - always
    ##
    ## Retrieving the current timestamp
    - name: Retrieving the current timestamp
      ansible.builtin.set_fact:
        backup_timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
      tags:
        - always
    ##
    ## Dump API Key
    - name: Dump API Key in MAIN
      ansible.builtin.debug:
        msg:
          - "API Key is {{ kube_api_key  }}"
      tags:
        - never
    ##
    ## Run oc login using the api key
    - name: Login to the oc client using the API key
      ansible.builtin.command:
        argv:
          - "{{ oscpClientBin | default('/usr/local/bin/oc') }}"
          - "login"
          - "--token={{ kube_api_key }}"
          - "--server={{ k8s_host }}"
      register: cmdResult
      ##### failed_when: (cmdResult.rc != 0)
      tags:
        - always
    ##
    ## Run oc login using the api key
    - name: Debug the command result of 'oc login'
      ansible.builtin.debug:
        msg:
          - "cmdResult is {{ cmdResult }}"
      tags:
        - always
    ########################################################################################
    ### Toggle the route for the namespaces
    ########################################################################################

    - name: Test if yq is installed
      ansible.builtin.shell: |
        which {{ yqBin }}
      register: shellResult
      failed_when: (shellResult.rc != 0)
      tags:
        - always

    - name: Test if the route exists in namespace {{ oscpNameSpace01 }}
      kubernetes.core.k8s_info:
        api_version: route.openshift.io/v1
        kind: Route
        namespace: "{{ oscpNameSpace01 }}"
        api_key: "{{ kube_api_key }}"
        name: "{{ oscpRouteNameToToggle }}"
      register: routeData01
      ignore_errors: yes
      tags:
        - always

    - name: We have the existing namespace with the route
      ansible.builtin.set_fact:
        sourceNamespace: "{{ oscpNameSpace01 }}"
        sourceDeployment: "{{ oscpDeployment01 }}"
        targetNamespace: "{{ oscpNameSpace02 }}"
        targetDeployment: "{{ oscpDeployment02 }}"
      when:  ( routeData01.resources | length > 0 )
      tags:
        - always
      ##
      ## Checking both namespaces to ensure we are not in an undefined state
      ## that the route existson both namespaces
    - name: Test if the route exists in namespace {{ oscpNameSpace02 }}
      kubernetes.core.k8s_info:
        api_version: route.openshift.io/v1
        kind: Route
        namespace: "{{ oscpNameSpace02 }}"
        api_key: "{{ kube_api_key }}"
        name: "{{ oscpRouteNameToToggle }}"
      register: routeData02
      ignore_errors: yes
      tags:
        - always

    - name: We have the existing namespace with the route
      ansible.builtin.set_fact:
        sourceNamespace: "{{ oscpNameSpace02 }}"
        sourceDeployment: "{{ oscpDeployment02 }}"
        targetNamespace: "{{ oscpNameSpace01 }}"
        targetDeployment: "{{ oscpDeployment01 }}"
      when:  ( routeData02.resources | length > 0 )
      tags:
        - always

    - name: Debug current route status
      ansible.builtin.debug:
        msg:
        - "Status of the route {{ oscpRouteNameToToggle }}: "
        - "Namespace {{ oscpNameSpace01 }}: {{ routeData01.resources | length > 0 }}"
        - "Namespace {{ oscpNameSpace02 }}: {{ routeData02.resources | length > 0 }}"
      tags:
        - always

    - name: We fail of the route exists on both namespaces
      ansible.builtin.fail:
        msg: "Route {{ oscpRouteNameToToggle }} exists on namespace {{ oscpNameSpace01 }} AND {{ oscpNameSpace02 }}! This is an undefined state and must be resolved manually!"
      when: (( routeData01.resources | length > 0 ) and ( routeData02.resources | length > 0))
      tags:
        - always

    - name: Set targetNamespace to {{ oscpIntialNamespaceForRoute }} if it does not exist
      ansible.builtin.set_fact:
        targetNamespace: "{{ oscpIntialNamespaceForRoute }}"
        targetDeployment: "{{ oscpInitialDeploymentForRoute }}"
      when: (( not routeData01.resources | length > 0 ) and ( not routeData02.resources | length > 0))
      tags:
        - always

    - name: Delete the existing route from the namespace {{ oscpNameSpace01 }}
      kubernetes.core.k8s:
        api_version: route.openshift.io/v1
        kind: Route
        namespace: "{{ oscpNameSpace01 }}"
        api_key: "{{ kube_api_key }}"
        name: "{{ oscpRouteNameToToggle }}"
        state: absent
      when: (routeData01.resources | length > 0)
      tags:
        - always

    - name: Delete the existing route from the namespace {{ oscpNameSpace02 }}
      kubernetes.core.k8s:
        api_version: route.openshift.io/v1
        kind: Route
        namespace: "{{ oscpNameSpace02 }}"
        api_key: "{{ kube_api_key }}"
        name: "{{ oscpRouteNameToToggle }}"
        state: absent
      when: (routeData02.resources | length > 0)
      tags:
        - always

    - name: Copy the existing Route to a new name and update host
      ansible.builtin.shell: |
        {{ oscpClientBin | default('/usr/local/bin/oc') }} -n {{ targetNamespace }} get routes {{ targetDeployment }}-passthrough -o yaml | {{ yqBin }} eval 'del(.metadata.annotations."kubectl.kubernetes.io/last-applied-configuration", .metadata.annotations."openshift.io/host.generated", .metadata.creationTimestamp, .metadata.resourceVersion, .metadata.uid, .status)' | {{ yqBin }} '.spec.host = "{{ oscpRouteHostNameToSet }}", .metadata.name = "{{ oscpRouteNameToToggle }}"' | {{ oscpClientBin | default('/usr/local/bin/oc') }} -n {{ targetNamespace }} apply -f -
      register: shellResult
      failed_when: ( shellResult.rc != 0 )
      tags:
        - always

    - name: Get the yaml of the new route
      ansible.builtin.shell: |
        {{ oscpClientBin | default('/usr/local/bin/oc') }} -n {{ targetNamespace  }} get route {{ oscpRouteNameToToggle }} -o yaml
      register: shellResult
      failed_when: ( shellResult.rc != 0 )
      tags:
        - always
    ##
    ## Send the list of files to Slack
    - name: Send the list of files to Slack
      community.general.slack:
        token: "{{ slackAuthenticationToken }}"
        msg: "Route created:\n ```{{ shellResult.stdout }}```"
      when: ((sendSlackNotifications is defined) and (sendSlackNotifications == true))
      tags:
        - always
    ##
    ## Perform the oc logout
    - name: Logout of the command line client
      ansible.builtin.command:
        argv:
          - "{{ oscpClientBin | default('/usr/local/bin/oc') }}"
          - "logout"
      when: ((oscpLogoutOfOc is defined) and
        (oscpLogoutOfOc | bool))
      tags:
        - always
    ##
    ## Logout
    - name: If login succeeded, try to log out (revoke access token)
      community.okd.openshift_auth:
        host: "{{ k8s_host }}"
        state: absent
        api_key: "{{ kube_api_key }}"
        validate_certs: "no"
      when: kube_api_key is defined
      tags:
        - always

    - name: Send stop notification message via Slack
      community.general.slack:
        token: "{{ slackAuthenticationToken }}"
        msg: "Toggle DX route: {{ inventory_hostname }} finished successfully"
      when: ((sendSlackNotifications is defined) and (sendSlackNotifications == true))
      tags:
        - always
