# The namespace / project name to use for the deployment.
dx.namespace: {{ dxNameSpace }}

# Image default repository
default.repository: REPOSITORY_NAME

## DX core configuration
# Pod name
dx.name: dx-{{ dxDeloymentLine }}
# Override the default repository for DX core
dx.repository:
# Image name of the DX core image
dx.image: CORE_IMAGE_NAME
# Tag name of the DX core image
dx.tag: CORE_IMAGE_TAG
# Image pull policy - supported values (Always, Never, IfNotPresent)
dx.pullpolicy: IfNotPresent
# Number of replicas - will set the desired number of replicas for dx.
# Incase if its set with the following properties it will override the dx.replicas configuration
##### dx.minreplicas: {{ dxMinReplicas }}
##### dx.maxreplicas: {{ dxMaxReplicas }}
dx.replicas: {{ dxReplicas }}

# storage class - is dependent on the Kubernetes flavor
dx.storageclass: {{ dxProfileStorageClassName }}
dx.volume: create
dx.volume.size: {{ dxProfileStorageSize }}

# DX context root definition
# Warning note: For Update Deployment you must set these properties if DX Context root is configured in your existing deployment
dx.path.contextroot: {{ dxContextRoot }}
# Personalized URL path - if the value is empty the default myportal
dx.path.personalized: {{ dxAuthenticatedHome }}
# Non Personalized URL path
dx.path.home: {{ dxAnonymousHome }}

# Supported database types are oracle, db2, derby, ... and empty - if the value is empty the default derby
dx.database: {{ dxDatabaseType }}

# Labels for DX core - comma separated list of labels, defined as a key:value pair - example (type:dxcore,version:192)
dx.labels: type:dxcore,version:{{ dxCfNumber }},line:{{ dxDeloymentLine }}

# Logging configuration for the DX core
# Value examples (true,false and empty) - if the value is empty the default false
dx.splitlogging: true
dx.logging.reclaim: Retain
# storage class - is dependent on the kubernetes flavor - if the value is empty the default gp2
dx.logging.stgclass: {{ dxLoggingStorageClassName }}
# Max logging size - if the value is empty the default 1G
dx.logging.size: {{ dxLogStorageSize }}
# Logging configuration for the DX core tranlog volume
# Value examples (true,false and empty) - if the value is empty the default true
dx.tranlogging: true
dx.tranlogging.reclaim:Delete
# storage class - is dependent on the kubernetes flavor - if the value is empty the default gp2
dx.tranlogging.stgclass: {{ dxTranLogStorageClassName }}
# PersistentVolumeClaim request size for the tranlog volume - if the value is empty or invalid for the underlying storage system, the default of 1G will be used

dx.tranlogging.size: {{ dxTranLogStorageSize }}

dx.deploy.host.override:
dx.deploy.host.override.force:

## DX core pod policy configuration
# example (dx:authoring,type:prod) or (dx:rendering,type:test)
dx.pod.labels: dx:authoring,type:prod,version:{{ dxCfNumber }},line:{{ dxDeloymentLine }}
dx.pod.nodeselector:
dx.pod.tolerations:
# example env1:one,env2:two
dx.pod.env:
dx.pod.annotations: version:{{ dxCfNumber }},type:dxcore,line:{{ dxDeloymentLine }}
# if the value is empty the default 30
dx.pod.terminationgraceperiod: 10

## DX core readiness probe configuration
# if the value is empty the default 220
dx.ready.initialdelay: 180
# if the value is empty the default 30
dx.ready.timeout: 240
# if the value is empty the default 2
dx.ready.threshold: 120
# if the value is empty the default 60
dx.ready.period: 60
# supported value (http, command and empty)
dx.ready.type: http
dx.ready.command:
dx.ready.path: /{{ dxContextRoot }}/{{ dxAnonymousHome }}
dx.ready.port: 10039
# supported values are (http, https and empty) - if the value is empty the default https
dx.ready.urischeme: http

## DX core liveness probe configuration
# if the value is empty the default 220
dx.live.initialdelay: 180
# if the value is empty the default 30
dx.live.timeout: 240
# if the value is empty the default 2
dx.live.threshold: 120
# if the value is empty the default 60
dx.live.period: 60
# supported value (http, command and empty)
dx.live.type: http
dx.live.command:
dx.live.path: /{{ dxContextRoot }}/{{ dxAnonymousHome }}
dx.live.port: 10039
# supported values are (http, https and empty) - if the value is empty the default https
dx.live.urischeme: http

## DX core exposed routes
# supported values are (true, false and empty) - if the value is empty the default true
dx.route.home: false
# supported values are (true, false and empty) - if the value is empty the default true
dx.route.sechome: true
# supported values are (true, false and empty) - if the value is empty the default true
dx.route.washomesec: true
# supported values are (true, false and empty) - if the value is empty the default true
dx.route.cw: false

## dx core resource allocation
# Request CPU per pod - if the value is empty the default 2
dx.request.cpu: {{ dxRequestCpu }}
# Request Memory per pod - if the value is empty the default 7G
dx.request.memory: {{ dxRequestMemory }}
# CPU limit per pod - if the value is empty the default 5
dx.limit.cpu: {{ dxLimitCpu }}
# Memory limit per pod - if the value is empty the default 9G
dx.limit.memory: {{ dxLimitMemory }}
# if the value is empty the default 85
dx.targetcpuutilizationpercent: {{ dxTargetCpuUtilizationPercent }}
# if the value is empty the default 95
dx.targetmemoryutilizationpercent: {{ dxTargetMemoryUtilizationPercent }}

# Define the environment type - rendering or authoring
dx.config.authoring: true
# Cors configuration (https://<HOST>:<PORT>,http://<HOST>:<PORT>/)
dx.config.cors:

## Remote Search configuration
# Enable the deployment - (true/false)
remote.search.enabled: {{ dxRemoteSearchEnabled }}
# Override the default repository for Remote search
remote.search.repository:
# Image name
remote.search.image: REMOTE_SEARCH_IMAGE_NAME
# Tag name
remote.search.tag: REMOTE_SEARCH_IMAGE_TAG
# if storage class is 'manual' set the name of the volume here
remote.search.volume:
# storage class - is dependent on the Kubernetes flavor
remote.search.stgclass: {{ dxRemoteSearchStorageClass }}

## Open LDAP configuration
# Enable the deployment - (true/false)
openldap.enabled: {{ dxOpenLdapEnabled }}
# Override the default repository for Open LDAP
openldap.repository:
# Image name
openldap.image: OPENLDAP_IMAGE_NAME
# Tag name
openldap.tag: OPENLDAP_IMAGE_TAG

## Hybrid deployment configuration - The following section enables and configures the 'enabled' features using the host and port provided. It prevents the dx core from being deployed.
# Enable the hybrid deployment - (true/false)
hybrid.enabled: {{ dxHybridEnabled }}
# Hostname for the remote DX
hybrid.url: {{ dxHybridUrl }}
# Port for the remote DX
hybrid.port: {{ dxHybridPort }}

## ci-cd
dxconnect.enabled: {{ dxConnectEnabled }}

## Experience API configuration - Can be configured against a kube based dx core or an on-prem instance, but not both. If hybrid the  ltpa and session cookies need to have a common base.
# Enable the deployment - (true/false)
api.enabled: {{ dxApiEnabled }}
# Override the default repository for Experience API
api.repository:
# Image name
api.image: RINGAPI_IMAGE_NAME
# Tag name
api.tag: RINGAPI_IMAGE_TAG

# Request CPU per pod - if the value is empty the default 1
api.request.cpu: 500m
# Request Memory per pod - if the value is empty the default 2G
api.request.memory: 1G
# CPU limit per pod - if the value is empty the default 3
api.limit.cpu: 1
# Memory limit per pod - if the value is empty the default 4G
api.limit.memory: 2G
# Min replicas - if the value is empty the default 1
api.minreplicas: 1
# Max replicas - if the value is empty the default 1
api.maxreplicas: 1
# if the value is empty the default 85
api.targetcpuutilizationpercent: 85
# if the value is empty the default 95
api.targetmemoryutilizationpercent: 95

## Content Composer configuration
# Enable the deployment - (true/false)
composer.enabled: {{ dxContentComposerEnabled }}
# Override the default repository for Content Composer
composer.repository:
# Image name
composer.image: CONTENT_COMPOSER_IMAGE_NAME
# Tag name
composer.tag: CONTENT_COMPOSER_IMAGE_TAG

# Request CPU per pod - if the value is empty the default 1
composer.request.cpu: 500m
# Request Memory per pod - if the value is empty the default 2G
composer.request.memory: 1G
# CPU limit per pod - if the value is empty the default 3
composer.limit.cpu: 1
# Memory limit per pod - if the value is empty the default 4G
composer.limit.memory: 2G
# Min replicas - if the value is empty the default 1
composer.minreplicas: 1
# Max replicas - if the value is empty the default 1
composer.maxreplicas: 3
# if the value is empty the default 85
composer.targetcpuutilizationpercent: 85
# if the value is empty the default 95
composer.targetmemoryutilizationpercent: 95

## DAM configuration
# Enable the deployment - (true/false)
dam.enabled: {{ dxDamEnabled }}
# Override the default repository for DAM
dam.repository:
# Image name
dam.image: DAM_IMAGE_NAME
# Tag name
dam.tag: DAM_IMAGE_TAG
# if storage class is 'manual' set the name of the volume here
dam.volume:
# storage class - is dependent on the kubernetes flavor
dam.stgclass: {{ dxDamStorageClass }}
# Request CPU per pod - if the value is empty the default 1
dam.request.cpu: 500m
# Request Memory per pod - if the value is empty the default 2G
dam.request.memory: 1G
# CPU limit per pod - if the value is empty the default 3
dam.limit.cpu: 2
# Memory limit per pod - if the value is empty the default 4G
dam.limit.memory: 2G
# Min replicas - if the value is empty the default 1
dam.minreplicas: 1
# Max replicas - if the value is empty the default 1
dam.maxreplicas: 3
# if the value is empty the default 85
dam.targetcpuutilizationpercent: 85
# if the value is empty the default 95
dam.targetmemoryutilizationpercent: 95

## DAM persistence service configuration
# Override the default repository for DAM persistence
persist.repository:
# Image name
persist.image: POSTGRES_IMAGE_NAME
# Tag name
persist.tag: POSTGRES_IMAGE_TAG
# persist.force.read: It enables a read-only pod. overides the setting persist.minreplicas: 1
persist.force-read: true
# Request CPU per pod - if the value is empty the default 1
persist.request.cpu: 1
# Request Memory per pod - if the value is empty the default 2G
persist.request.memory: 1G
# CPU limit per pod - if the value is empty the default 3
persist.limit.cpu: 2
# Memory limit per pod - if the value is empty the default 4G
persist.limit.memory: 3G
# Min replicas - if the value is empty the default 1
persist.minreplicas: 1
# Max replicas - if the value is empty the default 1
persist.maxreplicas: 1
# if the value is empty the default 85
persist.targetcpuutilizationpercent: 85
# if the value is empty the default 95
persist.targetmemoryutilizationpercent: 95

## Image processor service configuration
# Override the default repository for Image processor
imgproc.repository:
# Image name
imgproc.image: IMAGE_PROCESSOR_IMAGE_NAME
# Tag name
imgproc.tag: IMAGE_PROCESSOR_IMAGE_TAG
# Request CPU per pod - if the value is empty the default 1
imgproc.request.cpu: 1
# Request Memory per pod - if the value is empty the default 2G
imgproc.request.memory: 2G
# CPU limit per pod - if the value is empty the default 3
imgproc.limit.cpu: 2
# Memory limit per pod - if the value is empty the default 4G
imgproc.limit.memory: 2G
# Min replicas - if the value is empty the default 1
imgproc.minreplicas: 1
# Max replicas - if the value is empty the default 1
imgproc.maxreplicas: 3
# if the value is empty the default 85
imgproc.targetcpuutilizationpercent: 85
# if the value is empty the default 95
imgproc.targetmemoryutilizationpercent: 95

## Ingress configuration
# Ingress type - (custom, default, ambassador)
# Configures the routing method used, only applies in non-hybrid deployments:
# default: All routes enabled,
# custom: Custom Ingress, no routes enabled/managed
# ambassador: We enable the routes based on the configuration section "dx core exposed routes"
ingress.type: default
# Override the default repository for Ingress
ingress.repository:
# Image name
ingress.image: INGRESS_IMAGE_NAME
# Tag name
ingress.tag: INGRESS_IMAGE_TAG
# Redis image name
ingress.redis.image: REDIS_IMAGE_NAME
# Redis tag name
ingress.redis.tag: REDIS_IMAGE_TAG
## Ingress AWS Loadbalancer. Applicable only for EKS.
# Note of Caution: Change in this value will re-create the Loadbalancer and this will change the IP / DNS of the deployment endpoint.
# default | nlb
# ingress.aws.lb.type: default
## Cloud operator configuration
# Pod name (dx-hybrid-op)
dx.operator.name: dx-deployment-operator-{{ dxDeloymentLine }}
# Override the default repository for Cloud operator
dx.operator.repo:
# Image name
dx.operator.image: CLOUD_OPERATOR_IMAGE_NAME
# Tag name
dx.operator.tag: CLOUD_OPERATOR_IMAGE_TAG

## DAM operator configuration
# Override the default repository for DAM operator
dam.operator.repo:
# Image name
dam.operator.image: DAM_OPERATOR_IMAGE_NAME
# Tag name
dam.operator.tag: DAM_OPERATOR_IMAGE_TAG
